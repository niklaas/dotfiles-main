[include]
	path = ~/.local.gitconfig
[credential]
	helper = cache
[core]
	autocrlf = false
	filemode = false
	excludesfile = ~/.gitignore_global
[merge]
	tool = vimdiff
[mergetool "vimdiff"]
	cmd = $VISUAL -d $LOCAL $BASE $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J' -c 'Git! mergetool' -c 'cc|cl'
[alias]
	ad  = add
	ap  = add --patch
	br  = branch
	brf = !git branch --format='%(refname:short)' | fzf
	bl  = blame
	brc = rev-parse --abbrev-ref HEAD
	brd = !git branch | awk '{ print $1}' | grep -v -e '*' -e '+' | xargs -L 1 -p git branch -D
	co  = checkout
	cp  = cherry-pick
	ci  = commit -v
	cia = commit -v --amend
	cin = commit -v --no-verify
	df  = diff
	dfs = diff --staged
	dfc = diff --compact-summary
	dfw = diff --ignore-all-space
	dfn = diff --name-only
	dt  = difftool
	fe  = fetch
	la  = log -1 HEAD
	lag = log --all --graph --oneline --decorate
	lg  = log --graph --oneline --decorate
	lgs = log --stat
	mg  = merge --no-ff
	mgs = merge --squash
	mt  = mergetool
	pa  = !git remote | xargs -L1 git push --all
	pl  = pull --rebase
	ps  = push
	rb  = rebase
	rbi = rebase --interactive
	rbc = rebase --continue
	sh  = stash
	spa = stash --include-untracked
	spu = stash --include-untracked --keep-index
	spo = stash pop
	st  = status
	su  = submodule update --recursive --remote
	sw  = switch
	wt  = worktree
	wa  = "!wa() { git worktree add ../$(basename $(pwd))--$@ ;}; wa"
  # custom commands:
	ig  = "!gi() { curl -L -s https://www.gitignore.io/api/$@ ;}; gi"
	browse = "!browse() { $VISUAL +\"Gbrowse! $@ |q\" ;}; browse"
	# Code Reviews:
	files = !git diff --name-only $(git merge-base HEAD \"$REVIEW_BASE\")
	stat = !git diff --stat $(git merge-base HEAD \"$REVIEW_BASE\")
	review = !$VISUAL -p $(git files) +\"tabdo Gdiff $(git merge-base HEAD $REVIEW_BASE)\" +tabfirst
	reviews = !$VISUAL -p +\"tabdo Gdiff $(git merge-base HEAD $REVIEW_BASE)\" +tabfirst
	heatmap = !git log $(git merge-base HEAD \"$REVIEW_BASE\")..HEAD --pretty=format: --name-only | grep -v \"^$\" | sort | uniq -c | sort -rg
	# https://stackoverflow.com/questions/1527234/finding-a-branch-point-with-git
	oldest-ancestor = !zsh -c 'diff --old-line-format= --new-line-format= <(git rev-list --first-parent \"${1:-master}\") <(git rev-list --first-parent \"${2:-HEAD}\") | head -1' -
	find-merge = "!sh -c 'commit=$0 && branch=${1:-HEAD} && (git rev-list $commit..$branch --ancestry-path | cat -n; git rev-list $commit..$branch --first-parent | cat -n) | sort -k2 -s | uniq -f1 -d | sort -n | tail -1 | cut -f2'"
	show-merge = "!sh -c 'merge=$(git find-merge $0 $1) && [ -n \"$merge\" ] && git show $merge'"
[push]
	default = current
	followTags = true
[http]
	sslverify = true
[commit]
	gpgsign = true
[rerere]
	enabled = true
[diff]
	tool = vimdiff
	algorithm = histogram
[difftool]
	prompt = false
[pull]
	rebase = true
[github]
	user = niklaas
[init]
	defaultBranch = main
[rebase]
	autoSquash = true
	updateRefs = true
[fetch]
	writeCommitGraph = true
